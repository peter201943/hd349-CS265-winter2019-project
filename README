Project Name
    Ical Converter


Authors
    Henry Dang
    Peter Mangelsdorf

Reading Notes
    Setting your reader to a column size of 125 is recommended for the best viewing experience.

Contact Information
	Henry Deng at hd349@drexel.edu
	Peter Mangelsdorf at pjm349@drexel.edu

----------------------------------------------------------------------------------------------------------------------------

Description

Ical Converter (icalconv) takes an .ics file and converts it into an html file that contains a single table.
To build icalconv for your system, you must first use make build.

Then, run icalconv.sh file_name.ics, where file_name.ics is the name of your ics file. 

As part of the build procedure, icalconv will generate multiple files, including a `headers` file, a `temp_out` file,
a `out.html` file, and an `ideal.ics.tetmp` file. The only file here that is relevant to the user is the `out.html` file.

Open the `out.html` file in either Google Chrome or Mozilla Firefox, and you will see your ics file in a table format.

To delete all of the generated files, including the html file, simply run make clean.

Note that you should *not* execute the `run` target via `make run` on your own. You should run the icalconv script to call
the makefile, because the icalconv script will check that the file exists and has an *.ics extension.

Furthermore, icalconv can work on a URL as well, by running `icalconv.sh URL_HERE`, where `URL_HERE` is a valid URL. Note that
if you supply an invalid URL, it will not work, and will give an error. Additionally, you cannot use this functionality if you
are running this script inside one of Drexel's servers, because `wget` does not run correctly on Tux due to unknown reasons.

----------------------------------------------------------------------------------------------------------------------------

	Technical
Ical Converter uses these scripts in this order:
	clean_ics.sh | wget_remove.sh | get_table_headers.sh | pad_empty_fields.sh | generate_html.sh
	
A combination of bash and awk scripts is used. The awk scripts are invoked with bash scripts. Here is a brief overview of each script:

	clean_ics.sh
        Finds and removes all VAlarms from the ics file. Generates a file called temp_out that has
        all of the VAlarms removed.

	get_table_headers.sh & get_table_headers.awk
        Builds a list of html headers based on the headers in the ics file. get_table_headers.sh has get_table_headers.awk
        as a dependency. It will generate a file called `headers` with all of the unique headers in the file.

	pad_empty_fields.sh & pad_empty_fields.awk
        Pads out any missing fields in the headers list by setting that missing field to a blank string. 
        This script is called repeatedly for every VEVENT in an ics file. For example, not all VEVENTs have a
        URL field, but if even a single VEVENT has a URL field, then all of them will have the URL field set to an 
        empty string. This is done to make it easier to generate the HTML table.
	
	generate_table.sh & generate_table.awk
        generate_table.sh depends on generate_table.awk. It will generate a file called `out.html`. It relies on the `headers`
        file generated by `get_table_headers.sh`. The `out.html` file will be the desired output, with the ics file converted
        into a table format that can be opened by opening the `out.html` file in Google Chrome or Mozilla Firefox.

	makefile
Consists of 3 main procedures: "build", "test", and "run". For ease of use, these procedures are tied together under the, "all," phony target. Build assembles the independent bash scripts into the appropriate piped structure and assigns it to the target, "icalconv," stored as the, "EXE," variable. Since no formal languages were used, this is as close as we can conform to the rubric. Test feeds icalconv several test files to ensure it operates correctly. Error checking is facilitated through a series of assertion statements which compare the output of these files with their known correct output. Lastly, run assigns icalconv the user specified file location and runs icalconv. A cleaning target deletes all test, temporary, and generated script files. 
	Makefile
        Contains 

We will now go into more detail on each script's behavior and usage. All scripts are located within the, "scripts," directory, and all testing files are located within the, "test," directory.

----------------------------------------------------------------------------------------------------------------------------

	clean_check.sh
Utilizes diff to compare a known clean ics file with a messy one which is processed during the test procedure of the makefile.
Can be invoked out of makefile with "./clean_check.ics your_ics_file"


	generate_html.sh
Step 1 of the ics cleaning process. Utilizes a while loop and sed to remove any fields between vevents. This is different from clean_ics because it selects useful vevents which do not appear within valarms. the target ics file is loaded into a temporary ics file (clean_out.ics) and edits are made to that file.


	clean_ics.sh
Step 2 of the ics cleaning process. Utilizes a while loop and sed to remove nasty valarms and vevents. These pests are common in ics files and do not translate well to html tables, so we find and eliminate any instances of them. This script differs from generate_html because it selects bad vevents which appear within valarms. The target ics file is loaded into a temporary ics file (clean_out_2.ics) and in place sed calls are made to remove offending lines. clean_ics.sh is called during the build procedure of the makefile.


	wget_remove.sh
Step 3 of the ics cleaning process. Utilizes grep and sed to remove any urls, complete or broken, from the target ics file. Changes are saved to a temporary ics file (clean_out_3.ics). Offending lines are saved to a list, and the list is processed by sed to eliminate them from clean_out_3.ics


	get_table_headers.sh
Calls get_table_headers.awk, passes it into sort and uniq. This is done to preserve the purity of get_table_headers.awk. This works to removes any duplicate events.


	get_table_headers.awk
Finds any lines with, "BEGIN," and,"END," and returns the lines between them.

	pad_empty_fields.sh
Accepts a file name, "Headers," and passes it to pad_empty_fields.awk. Otherwise returns an error statement.


	pad_empty_fields.awk
Accepts a list of lines which appear between BEGIN: VEVENT and END: VEVENT, and adds these to a dictionary. Once adding is complete, the dictionary is printed. This printing process eliminates any blank fields and, "pads," them out with semicolons.


	generate_table.sh
Builds an HTML table given text input separated by newlines. This is then passed into generate_table.awk, and returned to finish building the table. It outputs to html.out
	
	
	generate_table.awk
Accepts input from generate_table.sh and appends <tr> and <\tr> to appropriate lines to build the columns within the table.


	
----------------------------------------------------------------------------------------------------------------------------

	Testing
A convention of, "filename#," and, "filename#_expected," is used for asserting the program operates correctly.
